

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Jul 27 12:48:29 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31  0000                     
    32                           ; Version 2.40
    33                           ; Generated 17/11/2021 GMT
    34                           ; 
    35                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F2550 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataCOMRAM
    69  00052E                     __pidataCOMRAM:
    70                           	callstack 0
    71                           
    72                           ;initializer for _start_tokens
    73  00052E  F1                 	db	241
    74  00052F  21                 	db	33
    75  000530  4E                 	db	78
    76  000531  5B                 	db	91
    77  0000                     _PORTB	set	3969
    78  0000                     _UCONbits	set	3949
    79  0000                     _ADCON1bits	set	4033
    80  0000                     _INTCON2bits	set	4081
    81  0000                     _PORTA	set	3968
    82  0000                     _PORTC	set	3970
    83  0000                     _TRISA	set	3986
    84  0000                     _TRISB	set	3987
    85  0000                     _TRISC	set	3988
    86  0000                     _INTCONbits	set	4082
    87                           
    88                           ; #config settings
    89                           
    90                           	psect	cinit
    91  0003F4                     __pcinit:
    92                           	callstack 0
    93  0003F4                     start_initialization:
    94                           	callstack 0
    95  0003F4                     __initialization:
    96                           	callstack 0
    97                           
    98                           ; Initialize objects allocated to COMRAM (4 bytes)
    99                           ; load TBLPTR registers with __pidataCOMRAM
   100  0003F4  0E2E               	movlw	low __pidataCOMRAM
   101  0003F6  6EF6               	movwf	tblptrl,c
   102  0003F8  0E05               	movlw	high __pidataCOMRAM
   103  0003FA  6EF7               	movwf	tblptrh,c
   104  0003FC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   105  0003FE  6EF8               	movwf	tblptru,c
   106  000400  EE00  F03F         	lfsr	0,__pdataCOMRAM
   107  000404  EE10 F004          	lfsr	1,4
   108  000408                     copy_data0:
   109  000408  0009               	tblrd		*+
   110  00040A  CFF5 FFEE          	movff	tablat,postinc0
   111  00040E  50E5               	movf	postdec1,w,c
   112  000410  50E1               	movf	fsr1l,w,c
   113  000412  E1FA               	bnz	copy_data0
   114                           
   115                           ; Clear objects allocated to BANK0 (69 bytes)
   116  000414  EE00  F060         	lfsr	0,__pbssBANK0
   117  000418  0E45               	movlw	69
   118  00041A                     clear_0:
   119  00041A  6AEE               	clrf	postinc0,c
   120  00041C  06E8               	decf	wreg,f,c
   121  00041E  E1FD               	bnz	clear_0
   122                           
   123                           ; Clear objects allocated to COMRAM (25 bytes)
   124  000420  EE00  F026         	lfsr	0,__pbssCOMRAM
   125  000424  0E19               	movlw	25
   126  000426                     clear_1:
   127  000426  6AEE               	clrf	postinc0,c
   128  000428  06E8               	decf	wreg,f,c
   129  00042A  E1FD               	bnz	clear_1
   130  00042C                     end_of_initialization:
   131                           	callstack 0
   132  00042C                     __end_of__initialization:
   133                           	callstack 0
   134  00042C  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   135  00042E  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   136  000430  0E00               	movlw	low (__Lmediumconst shr (0+16))
   137  000432  6EF8               	movwf	tblptru,c
   138  000434  0100               	movlb	0
   139  000436  EF8F  F002         	goto	_main	;jump to C main() function
   140                           
   141                           	psect	bssCOMRAM
   142  000026                     __pbssCOMRAM:
   143                           	callstack 0
   144  000026                     _lcdBuffer:
   145                           	callstack 0
   146  000026                     	ds	16
   147  000036                     _execute_proc:
   148                           	callstack 0
   149  000036                     	ds	2
   150  000038                     _bytes:
   151                           	callstack 0
   152  000038                     	ds	2
   153  00003A                     _starting_sequence:
   154                           	callstack 0
   155  00003A                     	ds	2
   156  00003C                     _pointer:
   157                           	callstack 0
   158  00003C                     	ds	2
   159  00003E                     _command:
   160                           	callstack 0
   161  00003E                     	ds	1
   162                           
   163                           	psect	dataCOMRAM
   164  00003F                     __pdataCOMRAM:
   165                           	callstack 0
   166  00003F                     _start_tokens:
   167                           	callstack 0
   168  00003F                     	ds	4
   169                           
   170                           	psect	bssBANK0
   171  000060                     __pbssBANK0:
   172                           	callstack 0
   173  000060                     __buffer:
   174                           	callstack 0
   175  000060                     	ds	69
   176                           
   177                           	psect	cstackCOMRAM
   178  000001                     __pcstackCOMRAM:
   179                           	callstack 0
   180  000001                     ??_high_isr:
   181  000001                     
   182                           ; 2 bytes @ 0x0
   183  000001                     	ds	3
   184  000004                     high_isr@bit3:
   185                           	callstack 0
   186                           
   187                           ; 1 bytes @ 0x3
   188  000004                     	ds	1
   189  000005                     high_isr@bit4:
   190                           	callstack 0
   191                           
   192                           ; 1 bytes @ 0x4
   193  000005                     	ds	1
   194  000006                     high_isr@bit5:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x5
   198  000006                     	ds	1
   199  000007                     high_isr@i:
   200                           	callstack 0
   201                           
   202                           ; 1 bytes @ 0x6
   203  000007                     	ds	1
   204  000008                     high_isr@data:
   205                           	callstack 0
   206                           
   207                           ; 1 bytes @ 0x7
   208  000008                     	ds	1
   209  000009                     ??_low_isr:
   210                           
   211                           ; 1 bytes @ 0x8
   212  000009                     	ds	1
   213  00000A                     ??_reset_lcd:
   214  00000A                     initPorts@serialMode:
   215                           	callstack 0
   216  00000A                     dataToSerial@numberH:
   217                           	callstack 0
   218  00000A                     chip_select@value:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x9
   222  00000A                     	ds	2
   223  00000C                     dataToSerial@numberL:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0xB
   227  00000C                     	ds	2
   228  00000E                     dataToSerial@temp:
   229                           	callstack 0
   230                           
   231                           ; 2 bytes @ 0xD
   232  00000E                     	ds	2
   233  000010                     dataToSerial@temp_352:
   234                           	callstack 0
   235                           
   236                           ; 2 bytes @ 0xF
   237  000010                     	ds	2
   238  000012                     dataToSerial@counter:
   239                           	callstack 0
   240                           
   241                           ; 2 bytes @ 0x11
   242  000012                     	ds	2
   243  000014                     writeCommand@instruction:
   244                           	callstack 0
   245                           
   246                           ; 1 bytes @ 0x13
   247  000014                     	ds	1
   248  000015                     ??_writeCommand:
   249                           
   250                           ; 1 bytes @ 0x14
   251  000015                     	ds	5
   252  00001A                     writeCommand@data:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x19
   256  00001A                     	ds	2
   257  00001C                     writeCommand@_control:
   258                           	callstack 0
   259                           
   260                           ; 1 bytes @ 0x1B
   261  00001C                     	ds	1
   262  00001D                     ??_LCD_clearDisplay:
   263  00001D                     consoleWriteCommand@instruction:
   264                           	callstack 0
   265                           
   266                           ; 1 bytes @ 0x1C
   267  00001D                     	ds	1
   268  00001E                     ??_consoleWriteCommand:
   269                           
   270                           ; 1 bytes @ 0x1D
   271  00001E                     	ds	1
   272  00001F                     consoleWriteCommand@control:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0x1E
   276  00001F                     	ds	1
   277  000020                     ??_loop:
   278  000020                     LCDConsoleInit@serialMode:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0x1F
   282  000020                     	ds	2
   283  000022                     LCDConsoleInit@i:
   284                           	callstack 0
   285  000022                     loop@dataReceived:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0x21
   289  000022                     	ds	1
   290  000023                     
   291                           ; 1 bytes @ 0x22
   292  000023                     	ds	1
   293  000024                     loop@i:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0x23
   297  000024                     	ds	2
   298  000026                     
   299                           ; 1 bytes @ 0x25
   300 ;;
   301 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   302 ;;
   303 ;; *************** function _main *****************
   304 ;; Defined at:
   305 ;;		line 119 in file "main.c"
   306 ;; Parameters:    Size  Location     Type
   307 ;;		None
   308 ;; Auto vars:     Size  Location     Type
   309 ;;		None
   310 ;; Return value:  Size  Location     Type
   311 ;;                  2   65[None  ] int 
   312 ;; Registers used:
   313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   314 ;; Tracked objects:
   315 ;;		On entry : 0/0
   316 ;;		On exit  : 0/0
   317 ;;		Unchanged: 0/0
   318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   319 ;;      Params:         0       0       0       0       0       0       0       0       0
   320 ;;      Locals:         0       0       0       0       0       0       0       0       0
   321 ;;      Temps:          0       0       0       0       0       0       0       0       0
   322 ;;      Totals:         0       0       0       0       0       0       0       0       0
   323 ;;Total ram usage:        0 bytes
   324 ;; Hardware stack levels required when called: 7
   325 ;; This function calls:
   326 ;;		_config
   327 ;;		_loop
   328 ;; This function is called by:
   329 ;;		Startup code after reset
   330 ;; This function uses a non-reentrant model
   331 ;;
   332                           
   333                           	psect	text0
   334  00051E                     __ptext0:
   335                           	callstack 0
   336  00051E                     _main:
   337                           	callstack 24
   338  00051E                     
   339                           ;main.c: 121:  config();
   340  00051E  EC1D  F002         	call	_config	;wreg free
   341  000522                     l1258:
   342                           
   343                           ;main.c: 124:     {;main.c: 125:   loop();
   344  000522  EC15  F000         	call	_loop	;wreg free
   345  000526  EF91  F002         	goto	l1258
   346  00052A  EF13  F000         	goto	start
   347  00052E                     __end_of_main:
   348                           	callstack 0
   349                           
   350 ;; *************** function _loop *****************
   351 ;; Defined at:
   352 ;;		line 40 in file "main.c"
   353 ;; Parameters:    Size  Location     Type
   354 ;;		None
   355 ;; Auto vars:     Size  Location     Type
   356 ;;  i               2   35[COMRAM] int 
   357 ;;  dataReceived    2   33[COMRAM] int 
   358 ;; Return value:  Size  Location     Type
   359 ;;                  1    wreg      void 
   360 ;; Registers used:
   361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   362 ;; Tracked objects:
   363 ;;		On entry : 0/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   367 ;;      Params:         0       0       0       0       0       0       0       0       0
   368 ;;      Locals:         4       0       0       0       0       0       0       0       0
   369 ;;      Temps:          2       0       0       0       0       0       0       0       0
   370 ;;      Totals:         6       0       0       0       0       0       0       0       0
   371 ;;Total ram usage:        6 bytes
   372 ;; Hardware stack levels used: 1
   373 ;; Hardware stack levels required when called: 5
   374 ;; This function calls:
   375 ;;		_consoleWriteCommand
   376 ;;		_reset_lcd
   377 ;;		_reset_lcd_sequence
   378 ;; This function is called by:
   379 ;;		_main
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383                           	psect	text1
   384  00002A                     __ptext1:
   385                           	callstack 0
   386  00002A                     _loop:
   387                           	callstack 25
   388  00002A                     
   389                           ;main.c: 42:     if (!execute_proc)
   390  00002A  5036               	movf	_execute_proc^0,w,c
   391  00002C  1037               	iorwf	(_execute_proc+1)^0,w,c
   392  00002E  A4D8               	btfss	status,2,c
   393  000030  EF1C  F000         	goto	u291
   394  000034  EF1E  F000         	goto	u290
   395  000038                     u291:
   396  000038  EF20  F000         	goto	l47
   397  00003C                     u290:
   398  00003C  EFA6  F000         	goto	l48
   399  000040                     l47:
   400                           
   401                           ;main.c: 47:     command = _buffer[0];
   402  000040  C060  F03E         	movff	__buffer,_command
   403                           
   404                           ;main.c: 48:     bytes = _buffer[1];
   405  000044  C061  F038         	movff	__buffer+1,_bytes
   406  000048  6A39               	clrf	(_bytes+1)^0,c
   407  00004A                     
   408                           ;main.c: 50:     int dataReceived = pointer - 2;
   409  00004A  0EFE               	movlw	254
   410  00004C  243C               	addwf	_pointer^0,w,c
   411  00004E  6E22               	movwf	loop@dataReceived^0,c
   412  000050  0EFF               	movlw	255
   413  000052  203D               	addwfc	(_pointer+1)^0,w,c
   414  000054  6E23               	movwf	(loop@dataReceived+1)^0,c
   415                           
   416                           ;main.c: 52:     if (dataReceived == bytes)
   417  000056  5038               	movf	_bytes^0,w,c
   418  000058  1822               	xorwf	loop@dataReceived^0,w,c
   419  00005A  E107               	bnz	u301
   420  00005C  5039               	movf	(_bytes+1)^0,w,c
   421  00005E  1823               	xorwf	(loop@dataReceived+1)^0,w,c
   422  000060  A4D8               	btfss	status,2,c
   423  000062  EF35  F000         	goto	u301
   424  000066  EF37  F000         	goto	u300
   425  00006A                     u301:
   426  00006A  EFA6  F000         	goto	l48
   427  00006E                     u300:
   428  00006E  EF81  F000         	goto	l1250
   429  000072                     l1228:
   430                           
   431                           ;main.c: 68:             {;main.c: 69:                 for(int i = 0; i < bytes; i++)
   432  000072  0E00               	movlw	0
   433  000074  6E25               	movwf	(loop@i+1)^0,c
   434  000076  0E00               	movlw	0
   435  000078  6E24               	movwf	loop@i^0,c
   436  00007A  EF4C  F000         	goto	l1234
   437  00007E                     l1230:
   438                           
   439                           ;main.c: 70:                 {;main.c: 71:                     consoleWriteCommand((1), 
      +                          _buffer[i + 2]);
   440  00007E  0E62               	movlw	low (__buffer+2)
   441  000080  2424               	addwf	loop@i^0,w,c
   442  000082  6ED9               	movwf	fsr2l,c
   443  000084  0E00               	movlw	high (__buffer+2)
   444  000086  2025               	addwfc	(loop@i+1)^0,w,c
   445  000088  6EDA               	movwf	fsr2h,c
   446  00008A  50DF               	movf	indf2,w,c
   447  00008C  6E1D               	movwf	consoleWriteCommand@instruction^0,c
   448  00008E  0E01               	movlw	1
   449  000090  EC5C  F002         	call	_consoleWriteCommand
   450  000094                     
   451                           ;main.c: 72:                 }
   452  000094  4A24               	infsnz	loop@i^0,f,c
   453  000096  2A25               	incf	(loop@i+1)^0,f,c
   454  000098                     l1234:
   455  000098  5038               	movf	_bytes^0,w,c
   456  00009A  5C24               	subwf	loop@i^0,w,c
   457  00009C  5025               	movf	(loop@i+1)^0,w,c
   458  00009E  0A80               	xorlw	128
   459  0000A0  6E20               	movwf	??_loop^0,c
   460  0000A2  5039               	movf	(_bytes+1)^0,w,c
   461  0000A4  0A80               	xorlw	128
   462  0000A6  5820               	subwfb	??_loop^0,w,c
   463  0000A8  A0D8               	btfss	status,0,c
   464  0000AA  EF59  F000         	goto	u311
   465  0000AE  EF5B  F000         	goto	u310
   466  0000B2                     u311:
   467  0000B2  EF3F  F000         	goto	l1230
   468  0000B6                     u310:
   469  0000B6  EFA6  F000         	goto	l48
   470  0000BA                     l1236:
   471                           
   472                           ;main.c: 76:             {;main.c: 77:                 consoleWriteCommand(0, 2);
   473  0000BA  0E02               	movlw	2
   474  0000BC  6E1D               	movwf	consoleWriteCommand@instruction^0,c
   475  0000BE  0E00               	movlw	0
   476  0000C0  EC5C  F002         	call	_consoleWriteCommand
   477                           
   478                           ;main.c: 78:             };main.c: 79:             break;
   479  0000C4  EFA6  F000         	goto	l48
   480  0000C8                     l1238:
   481                           
   482                           ;main.c: 81:             {;main.c: 82:                 consoleWriteCommand(0, 65);
   483  0000C8  0E41               	movlw	65
   484  0000CA  6E1D               	movwf	consoleWriteCommand@instruction^0,c
   485  0000CC  0E00               	movlw	0
   486  0000CE  EC5C  F002         	call	_consoleWriteCommand
   487                           
   488                           ;main.c: 83:             };main.c: 84:             break;
   489  0000D2  EFA6  F000         	goto	l48
   490  0000D6                     l1240:
   491                           
   492                           ;main.c: 86:             {;main.c: 87:                 consoleWriteCommand(0, 32);
   493  0000D6  0E20               	movlw	32
   494  0000D8  6E1D               	movwf	consoleWriteCommand@instruction^0,c
   495  0000DA  0E00               	movlw	0
   496  0000DC  EC5C  F002         	call	_consoleWriteCommand
   497                           
   498                           ;main.c: 88:             };main.c: 89:             break;
   499  0000E0  EFA6  F000         	goto	l48
   500  0000E4                     l1242:
   501                           
   502                           ;main.c: 91:             {;main.c: 92:                 consoleWriteCommand(0, 12);
   503  0000E4  0E0C               	movlw	12
   504  0000E6  6E1D               	movwf	consoleWriteCommand@instruction^0,c
   505  0000E8  0E00               	movlw	0
   506  0000EA  EC5C  F002         	call	_consoleWriteCommand
   507                           
   508                           ;main.c: 93:             };main.c: 94:             break;
   509  0000EE  EFA6  F000         	goto	l48
   510  0000F2                     l1244:
   511                           
   512                           ;main.c: 96:             {;main.c: 97:                 reset_lcd();
   513  0000F2  EC49  F002         	call	_reset_lcd	;wreg free
   514                           
   515                           ;main.c: 98:             };main.c: 99:             break;
   516  0000F6  EFA6  F000         	goto	l48
   517  0000FA                     l1246:
   518                           
   519                           ;main.c: 101:             {;main.c: 102:                 reset_lcd_sequence();
   520  0000FA  EC86  F002         	call	_reset_lcd_sequence	;wreg free
   521                           
   522                           ;main.c: 103:             };main.c: 104:             break;
   523  0000FE  EFA6  F000         	goto	l48
   524  000102                     l1250:
   525  000102  503E               	movf	_command^0,w,c
   526  000104  6E20               	movwf	??_loop^0,c
   527  000106  6A21               	clrf	(??_loop+1)^0,c
   528                           
   529                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   530                           ; Switch size 1, requested type "simple"
   531                           ; Number of cases is 1, Range of values is 0 to 0
   532                           ; switch strategies available:
   533                           ; Name         Instructions Cycles
   534                           ; simple_byte            4     3 (average)
   535                           ;	Chosen strategy is simple_byte
   536  000108  5021               	movf	(??_loop+1)^0,w,c
   537  00010A  0A00               	xorlw	0	; case 0
   538  00010C  B4D8               	btfsc	status,2,c
   539  00010E  EF8B  F000         	goto	l1352
   540  000112  EF7D  F000         	goto	l1246
   541  000116                     l1352:
   542                           
   543                           ; Switch size 1, requested type "simple"
   544                           ; Number of cases is 6, Range of values is 1 to 78
   545                           ; switch strategies available:
   546                           ; Name         Instructions Cycles
   547                           ; simple_byte           19    10 (average)
   548                           ;	Chosen strategy is simple_byte
   549  000116  5020               	movf	??_loop^0,w,c
   550  000118  0A01               	xorlw	1	; case 1
   551  00011A  B4D8               	btfsc	status,2,c
   552  00011C  EF39  F000         	goto	l1228
   553  000120  0A03               	xorlw	3	; case 2
   554  000122  B4D8               	btfsc	status,2,c
   555  000124  EF5D  F000         	goto	l1236
   556  000128  0A0E               	xorlw	14	; case 12
   557  00012A  B4D8               	btfsc	status,2,c
   558  00012C  EF72  F000         	goto	l1242
   559  000130  0A2C               	xorlw	44	; case 32
   560  000132  B4D8               	btfsc	status,2,c
   561  000134  EF6B  F000         	goto	l1240
   562  000138  0A61               	xorlw	97	; case 65
   563  00013A  B4D8               	btfsc	status,2,c
   564  00013C  EF64  F000         	goto	l1238
   565  000140  0A0F               	xorlw	15	; case 78
   566  000142  B4D8               	btfsc	status,2,c
   567  000144  EF79  F000         	goto	l1244
   568  000148  EF7D  F000         	goto	l1246
   569  00014C                     l48:
   570  00014C  0012               	return		;funcret
   571  00014E                     __end_of_loop:
   572                           	callstack 0
   573                           
   574 ;; *************** function _reset_lcd_sequence *****************
   575 ;; Defined at:
   576 ;;		line 15 in file "main.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;		None
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, status,2
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   590 ;;      Params:         0       0       0       0       0       0       0       0       0
   591 ;;      Locals:         0       0       0       0       0       0       0       0       0
   592 ;;      Temps:          0       0       0       0       0       0       0       0       0
   593 ;;      Totals:         0       0       0       0       0       0       0       0       0
   594 ;;Total ram usage:        0 bytes
   595 ;; Hardware stack levels used: 1
   596 ;; Hardware stack levels required when called: 2
   597 ;; This function calls:
   598 ;;		Nothing
   599 ;; This function is called by:
   600 ;;		_loop
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           	psect	text2
   605  00050C                     __ptext2:
   606                           	callstack 0
   607  00050C                     _reset_lcd_sequence:
   608                           	callstack 27
   609  00050C                     
   610                           ;main.c: 17:     pointer = 0;
   611  00050C  0E00               	movlw	0
   612  00050E  6E3D               	movwf	(_pointer+1)^0,c
   613  000510  0E00               	movlw	0
   614  000512  6E3C               	movwf	_pointer^0,c
   615                           
   616                           ;main.c: 18:     starting_sequence = 0;
   617  000514  0E00               	movlw	0
   618  000516  6E3B               	movwf	(_starting_sequence+1)^0,c
   619  000518  0E00               	movlw	0
   620  00051A  6E3A               	movwf	_starting_sequence^0,c
   621  00051C  0012               	return		;funcret
   622  00051E                     __end_of_reset_lcd_sequence:
   623                           	callstack 0
   624                           
   625 ;; *************** function _config *****************
   626 ;; Defined at:
   627 ;;		line 21 in file "main.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, status,2, status,0, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   641 ;;      Params:         0       0       0       0       0       0       0       0       0
   642 ;;      Locals:         0       0       0       0       0       0       0       0       0
   643 ;;      Temps:          0       0       0       0       0       0       0       0       0
   644 ;;      Totals:         0       0       0       0       0       0       0       0       0
   645 ;;Total ram usage:        0 bytes
   646 ;; Hardware stack levels used: 1
   647 ;; Hardware stack levels required when called: 6
   648 ;; This function calls:
   649 ;;		_LCDConsoleInit
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           	psect	text3
   656  00043A                     __ptext3:
   657                           	callstack 0
   658  00043A                     _config:
   659                           	callstack 24
   660  00043A                     
   661                           ;main.c: 23:     ADCON1bits.PCFG = 15;
   662  00043A  0E0F               	movlw	15
   663  00043C  12C1               	iorwf	193,f,c	;volatile
   664  00043E                     
   665                           ;main.c: 24:     UCONbits.USBEN = 0;
   666  00043E  966D               	bcf	109,3,c	;volatile
   667                           
   668                           ;main.c: 25:     PORTC = 0;
   669  000440  0E00               	movlw	0
   670  000442  6E82               	movwf	130,c	;volatile
   671  000444                     
   672                           ;main.c: 26:     TRISB = 255;
   673  000444  6893               	setf	147,c	;volatile
   674  000446                     
   675                           ;main.c: 27:     TRISC = 255;
   676  000446  6894               	setf	148,c	;volatile
   677  000448                     
   678                           ;main.c: 28:     TRISA = 255;
   679  000448  6892               	setf	146,c	;volatile
   680  00044A                     
   681                           ;main.c: 29:     PORTA &= ~(1 << 0x2);
   682  00044A  9480               	bcf	128,2,c	;volatile
   683  00044C                     
   684                           ;main.c: 30:     TRISA &= ~(1 << 0x2);
   685  00044C  9492               	bcf	146,2,c	;volatile
   686  00044E                     
   687                           ;main.c: 31:     INTCON2bits.INTEDG0 = 1;
   688  00044E  8CF1               	bsf	241,6,c	;volatile
   689  000450                     
   690                           ;main.c: 32:     LCDConsoleInit(1);
   691  000450  0E00               	movlw	0
   692  000452  6E21               	movwf	(LCDConsoleInit@serialMode+1)^0,c
   693  000454  0E01               	movlw	1
   694  000456  6E20               	movwf	LCDConsoleInit@serialMode^0,c
   695  000458  EC9B  F001         	call	_LCDConsoleInit	;wreg free
   696  00045C                     
   697                           ;main.c: 33:     _delay(200);
   698  00045C  0E42               	movlw	66
   699  00045E                     u437:
   700  00045E  2EE8               	decfsz	wreg,f,c
   701  000460  D7FE               	bra	u437
   702  000462  D000               	nop2	
   703  000464                     
   704                           ;main.c: 36:     (INTCONbits.GIE = 1);
   705  000464  8EF2               	bsf	242,7,c	;volatile
   706  000466                     
   707                           ;main.c: 37:     (INTCONbits.INT0E=1);
   708  000466  88F2               	bsf	242,4,c	;volatile
   709  000468  0012               	return		;funcret
   710  00046A                     __end_of_config:
   711                           	callstack 0
   712                           
   713 ;; *************** function _LCDConsoleInit *****************
   714 ;; Defined at:
   715 ;;		line 33 in file "lcd.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;  serialMode      2   31[COMRAM] short 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;  i               1   33[COMRAM] unsigned char 
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, status,2, status,0, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   729 ;;      Params:         2       0       0       0       0       0       0       0       0
   730 ;;      Locals:         1       0       0       0       0       0       0       0       0
   731 ;;      Temps:          0       0       0       0       0       0       0       0       0
   732 ;;      Totals:         3       0       0       0       0       0       0       0       0
   733 ;;Total ram usage:        3 bytes
   734 ;; Hardware stack levels used: 1
   735 ;; Hardware stack levels required when called: 5
   736 ;; This function calls:
   737 ;;		_LCD_clearDisplay
   738 ;;		_chip_select
   739 ;;		_consoleWriteCommand
   740 ;;		_initPorts
   741 ;;		_reset_lcd
   742 ;; This function is called by:
   743 ;;		_config
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           	psect	text4
   748  000336                     __ptext4:
   749                           	callstack 0
   750  000336                     _LCDConsoleInit:
   751                           	callstack 24
   752  000336                     
   753                           ;lcd.c: 34:     initPorts(serialMode);
   754  000336  C020  F00A         	movff	LCDConsoleInit@serialMode,initPorts@serialMode
   755  00033A  C021  F00B         	movff	LCDConsoleInit@serialMode+1,initPorts@serialMode+1
   756  00033E  EC35  F002         	call	_initPorts	;wreg free
   757                           
   758                           ;lcd.c: 35:     initPorts(serialMode);
   759  000342  C020  F00A         	movff	LCDConsoleInit@serialMode,initPorts@serialMode
   760  000346  C021  F00B         	movff	LCDConsoleInit@serialMode+1,initPorts@serialMode+1
   761  00034A  EC35  F002         	call	_initPorts	;wreg free
   762  00034E                     
   763                           ;lcd.c: 37:  for(char i = 0; i < 50; i++) {__asm("nop"); };
   764  00034E  0E00               	movlw	0
   765  000350  6E22               	movwf	LCDConsoleInit@i^0,c
   766  000352                     l139:
   767  000352  F000               	nop		;# 
   768  000354  2A22               	incf	LCDConsoleInit@i^0,f,c
   769  000356  0E31               	movlw	49
   770  000358  6422               	cpfsgt	LCDConsoleInit@i^0,c
   771  00035A  EFB1  F001         	goto	u281
   772  00035E  EFB3  F001         	goto	u280
   773  000362                     u281:
   774  000362  EFA9  F001         	goto	l139
   775  000366                     u280:
   776  000366                     
   777                           ;lcd.c: 41:     chip_select(1);
   778  000366  0E00               	movlw	0
   779  000368  6E0B               	movwf	(chip_select@value+1)^0,c
   780  00036A  0E01               	movlw	1
   781  00036C  6E0A               	movwf	chip_select@value^0,c
   782  00036E  EC6B  F002         	call	_chip_select	;wreg free
   783                           
   784                           ;lcd.c: 44:     reset_lcd();
   785  000372  EC49  F002         	call	_reset_lcd	;wreg free
   786                           
   787                           ;lcd.c: 47:     LCD_clearDisplay();
   788  000376  EC79  F002         	call	_LCD_clearDisplay	;wreg free
   789                           
   790                           ;lcd.c: 50:  consoleWriteCommand(0, 2);
   791  00037A  0E02               	movlw	2
   792  00037C  6E1D               	movwf	consoleWriteCommand@instruction^0,c
   793  00037E  0E00               	movlw	0
   794  000380  EC5C  F002         	call	_consoleWriteCommand
   795                           
   796                           ;lcd.c: 52:  consoleWriteCommand(0, 12);
   797  000384  0E0C               	movlw	12
   798  000386  6E1D               	movwf	consoleWriteCommand@instruction^0,c
   799  000388  0E00               	movlw	0
   800  00038A  EC5C  F002         	call	_consoleWriteCommand
   801                           
   802                           ;lcd.c: 54:  consoleWriteCommand(0, 32);
   803  00038E  0E20               	movlw	32
   804  000390  6E1D               	movwf	consoleWriteCommand@instruction^0,c
   805  000392  0E00               	movlw	0
   806  000394  EC5C  F002         	call	_consoleWriteCommand
   807  000398  0012               	return		;funcret
   808  00039A                     __end_of_LCDConsoleInit:
   809                           	callstack 0
   810                           
   811 ;; *************** function _reset_lcd *****************
   812 ;; Defined at:
   813 ;;		line 270 in file "lcd.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;		None
   816 ;; Auto vars:     Size  Location     Type
   817 ;;		None
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   827 ;;      Params:         0       0       0       0       0       0       0       0       0
   828 ;;      Locals:         0       0       0       0       0       0       0       0       0
   829 ;;      Temps:          1       0       0       0       0       0       0       0       0
   830 ;;      Totals:         1       0       0       0       0       0       0       0       0
   831 ;;Total ram usage:        1 bytes
   832 ;; Hardware stack levels used: 1
   833 ;; Hardware stack levels required when called: 2
   834 ;; This function calls:
   835 ;;		Nothing
   836 ;; This function is called by:
   837 ;;		_loop
   838 ;;		_LCDConsoleInit
   839 ;;		_LCDGraphicsInit
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text5
   844  000492                     __ptext5:
   845                           	callstack 0
   846  000492                     _reset_lcd:
   847                           	callstack 27
   848  000492                     
   849                           ;lcd.c: 271:     PORTB &= ~(1 << 0x1);
   850  000492  9281               	bcf	129,1,c	;volatile
   851  000494                     
   852                           ;lcd.c: 272:     _delay((unsigned long)((200)*(48000000/4000000.0)));
   853  000494  0E04               	movlw	4
   854  000496  6E0A               	movwf	??_reset_lcd^0,c
   855  000498  0E1C               	movlw	28
   856  00049A                     u447:
   857  00049A  2EE8               	decfsz	wreg,f,c
   858  00049C  D7FE               	bra	u447
   859  00049E  2E0A               	decfsz	??_reset_lcd^0,f,c
   860  0004A0  D7FC               	bra	u447
   861  0004A2  D000               	nop2	
   862  0004A4                     
   863                           ;lcd.c: 273:     PORTB |= (1 << 0x1);
   864  0004A4  8281               	bsf	129,1,c	;volatile
   865                           
   866                           ;lcd.c: 274:     _delay((unsigned long)((200)*(48000000/4000000.0)));
   867  0004A6  0E04               	movlw	4
   868  0004A8  6E0A               	movwf	??_reset_lcd^0,c
   869  0004AA  0E1C               	movlw	28
   870  0004AC                     u457:
   871  0004AC  2EE8               	decfsz	wreg,f,c
   872  0004AE  D7FE               	bra	u457
   873  0004B0  2E0A               	decfsz	??_reset_lcd^0,f,c
   874  0004B2  D7FC               	bra	u457
   875  0004B4  D000               	nop2	
   876  0004B6  0012               	return		;funcret
   877  0004B8                     __end_of_reset_lcd:
   878                           	callstack 0
   879                           
   880 ;; *************** function _initPorts *****************
   881 ;; Defined at:
   882 ;;		line 13 in file "lcd.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;  serialMode      2    9[COMRAM] short 
   885 ;; Auto vars:     Size  Location     Type
   886 ;;		None
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		status,2, status,0
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   896 ;;      Params:         2       0       0       0       0       0       0       0       0
   897 ;;      Locals:         0       0       0       0       0       0       0       0       0
   898 ;;      Temps:          0       0       0       0       0       0       0       0       0
   899 ;;      Totals:         2       0       0       0       0       0       0       0       0
   900 ;;Total ram usage:        2 bytes
   901 ;; Hardware stack levels used: 1
   902 ;; Hardware stack levels required when called: 2
   903 ;; This function calls:
   904 ;;		Nothing
   905 ;; This function is called by:
   906 ;;		_LCDConsoleInit
   907 ;;		_LCDGraphicsInit
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text6
   912  00046A                     __ptext6:
   913                           	callstack 0
   914  00046A                     _initPorts:
   915                           	callstack 26
   916  00046A                     
   917                           ;lcd.c: 14:     TRISB &= ~(1 << 0x5);
   918  00046A  9A93               	bcf	147,5,c	;volatile
   919                           
   920                           ;lcd.c: 15:     TRISB &= ~(1 << 0x3);
   921  00046C  9693               	bcf	147,3,c	;volatile
   922                           
   923                           ;lcd.c: 16:     TRISB &= ~(1 << 0x4);
   924  00046E  9893               	bcf	147,4,c	;volatile
   925                           
   926                           ;lcd.c: 17:     TRISB &= ~(1 << 0x1);
   927  000470  9293               	bcf	147,1,c	;volatile
   928                           
   929                           ;lcd.c: 18:     TRISB &= ~(1 << 0x2);
   930  000472  9493               	bcf	147,2,c	;volatile
   931                           
   932                           ;lcd.c: 20:     PORTB &= ~(1 << 0x5);
   933  000474  9A81               	bcf	129,5,c	;volatile
   934                           
   935                           ;lcd.c: 21:     PORTB &= ~(1 << 0x3);
   936  000476  9681               	bcf	129,3,c	;volatile
   937                           
   938                           ;lcd.c: 22:     PORTB &= ~(1 << 0x4);
   939  000478  9881               	bcf	129,4,c	;volatile
   940  00047A                     
   941                           ;lcd.c: 23:     if (serialMode & 1)
   942  00047A  A00A               	btfss	initPorts@serialMode^0,0,c
   943  00047C  EF42  F002         	goto	u261
   944  000480  EF44  F002         	goto	u260
   945  000484                     u261:
   946  000484  EF47  F002         	goto	l1168
   947  000488                     u260:
   948  000488                     
   949                           ;lcd.c: 24:     {;lcd.c: 25:         PORTB &= ~(1 << 0x2);
   950  000488  9481               	bcf	129,2,c	;volatile
   951                           
   952                           ;lcd.c: 26:     }
   953  00048A  EF48  F002         	goto	l136
   954  00048E                     l1168:
   955                           
   956                           ;lcd.c: 28:     {;lcd.c: 29:         PORTB |= (1 << 0x2);
   957  00048E  8481               	bsf	129,2,c	;volatile
   958  000490                     l136:
   959  000490  0012               	return		;funcret
   960  000492                     __end_of_initPorts:
   961                           	callstack 0
   962                           
   963 ;; *************** function _consoleWriteCommand *****************
   964 ;; Defined at:
   965 ;;		line 57 in file "lcd.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;  control         1    wreg     unsigned char 
   968 ;;  instruction     1   28[COMRAM] unsigned char 
   969 ;; Auto vars:     Size  Location     Type
   970 ;;  control         1   30[COMRAM] unsigned char 
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		wreg, status,2, status,0, cstack
   975 ;; Tracked objects:
   976 ;;		On entry : 0/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   980 ;;      Params:         1       0       0       0       0       0       0       0       0
   981 ;;      Locals:         1       0       0       0       0       0       0       0       0
   982 ;;      Temps:          1       0       0       0       0       0       0       0       0
   983 ;;      Totals:         3       0       0       0       0       0       0       0       0
   984 ;;Total ram usage:        3 bytes
   985 ;; Hardware stack levels used: 1
   986 ;; Hardware stack levels required when called: 4
   987 ;; This function calls:
   988 ;;		_writeCommand
   989 ;; This function is called by:
   990 ;;		_loop
   991 ;;		_LCDConsoleInit
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text7
   996  0004B8                     __ptext7:
   997                           	callstack 0
   998  0004B8                     _consoleWriteCommand:
   999                           	callstack 25
  1000                           
  1001                           ;incstack = 0
  1002                           ;consoleWriteCommand@control stored from wreg
  1003  0004B8  6E1F               	movwf	consoleWriteCommand@control^0,c
  1004  0004BA                     
  1005                           ;lcd.c: 58:     writeCommand(control, instruction);
  1006  0004BA  C01D  F014         	movff	consoleWriteCommand@instruction,writeCommand@instruction
  1007  0004BE  501F               	movf	consoleWriteCommand@control^0,w,c
  1008  0004C0  ECCD  F001         	call	_writeCommand
  1009  0004C4                     
  1010                           ;lcd.c: 59:     _delay((unsigned long)((200)*(48000000/4000000.0)));
  1011  0004C4  0E04               	movlw	4
  1012  0004C6  6E1E               	movwf	??_consoleWriteCommand^0,c
  1013  0004C8  0E1C               	movlw	28
  1014  0004CA                     u467:
  1015  0004CA  2EE8               	decfsz	wreg,f,c
  1016  0004CC  D7FE               	bra	u467
  1017  0004CE  2E1E               	decfsz	??_consoleWriteCommand^0,f,c
  1018  0004D0  D7FC               	bra	u467
  1019  0004D2  D000               	nop2	
  1020  0004D4  0012               	return		;funcret
  1021  0004D6                     __end_of_consoleWriteCommand:
  1022                           	callstack 0
  1023                           
  1024 ;; *************** function _chip_select *****************
  1025 ;; Defined at:
  1026 ;;		line 277 in file "lcd.c"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;  value           2    9[COMRAM] short 
  1029 ;; Auto vars:     Size  Location     Type
  1030 ;;		None
  1031 ;; Return value:  Size  Location     Type
  1032 ;;                  1    wreg      void 
  1033 ;; Registers used:
  1034 ;;		wreg, status,2, status,0
  1035 ;; Tracked objects:
  1036 ;;		On entry : 0/0
  1037 ;;		On exit  : 0/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1040 ;;      Params:         2       0       0       0       0       0       0       0       0
  1041 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1042 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1043 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1044 ;;Total ram usage:        2 bytes
  1045 ;; Hardware stack levels used: 1
  1046 ;; Hardware stack levels required when called: 2
  1047 ;; This function calls:
  1048 ;;		Nothing
  1049 ;; This function is called by:
  1050 ;;		_LCDConsoleInit
  1051 ;;		_LCDGraphicsInit
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           	psect	text8
  1056  0004D6                     __ptext8:
  1057                           	callstack 0
  1058  0004D6                     _chip_select:
  1059                           	callstack 26
  1060  0004D6                     
  1061                           ;lcd.c: 278:     if (value) {
  1062  0004D6  500A               	movf	chip_select@value^0,w,c
  1063  0004D8  100B               	iorwf	(chip_select@value+1)^0,w,c
  1064  0004DA  B4D8               	btfsc	status,2,c
  1065  0004DC  EF72  F002         	goto	u271
  1066  0004E0  EF74  F002         	goto	u270
  1067  0004E4                     u271:
  1068  0004E4  EF77  F002         	goto	l1174
  1069  0004E8                     u270:
  1070  0004E8                     
  1071                           ;lcd.c: 279:         PORTB |= (1 << 0x5);
  1072  0004E8  8A81               	bsf	129,5,c	;volatile
  1073                           
  1074                           ;lcd.c: 280:     }
  1075  0004EA  EF78  F002         	goto	l192
  1076  0004EE                     l1174:
  1077                           
  1078                           ;lcd.c: 282:         PORTB &= ~(1 << 0x5);
  1079  0004EE  9A81               	bcf	129,5,c	;volatile
  1080  0004F0                     l192:
  1081  0004F0  0012               	return		;funcret
  1082  0004F2                     __end_of_chip_select:
  1083                           	callstack 0
  1084                           
  1085 ;; *************** function _LCD_clearDisplay *****************
  1086 ;; Defined at:
  1087 ;;		line 62 in file "lcd.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;		None
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;		None
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1101 ;;      Params:         0       0       0       0       0       0       0       0       0
  1102 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1103 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1104 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1105 ;;Total ram usage:        1 bytes
  1106 ;; Hardware stack levels used: 1
  1107 ;; Hardware stack levels required when called: 4
  1108 ;; This function calls:
  1109 ;;		_writeCommand
  1110 ;; This function is called by:
  1111 ;;		_LCDConsoleInit
  1112 ;;		_LCDGraphicsInit
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text9
  1117  0004F2                     __ptext9:
  1118                           	callstack 0
  1119  0004F2                     _LCD_clearDisplay:
  1120                           	callstack 24
  1121  0004F2                     
  1122                           ;lcd.c: 63:     writeCommand(0, 0x01);
  1123  0004F2  0E01               	movlw	1
  1124  0004F4  6E14               	movwf	writeCommand@instruction^0,c
  1125  0004F6  0E00               	movlw	0
  1126  0004F8  ECCD  F001         	call	_writeCommand
  1127  0004FC                     
  1128                           ;lcd.c: 64:     _delay((unsigned long)((2)*(48000000/4000.0)));
  1129  0004FC  0E20               	movlw	32
  1130  0004FE  6E1D               	movwf	??_LCD_clearDisplay^0,c
  1131  000500  0E2A               	movlw	42
  1132  000502                     u477:
  1133  000502  2EE8               	decfsz	wreg,f,c
  1134  000504  D7FE               	bra	u477
  1135  000506  2E1D               	decfsz	??_LCD_clearDisplay^0,f,c
  1136  000508  D7FC               	bra	u477
  1137  00050A  0012               	return		;funcret
  1138  00050C                     __end_of_LCD_clearDisplay:
  1139                           	callstack 0
  1140                           
  1141 ;; *************** function _writeCommand *****************
  1142 ;; Defined at:
  1143 ;;		line 137 in file "lcd.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  _control        1    wreg     unsigned char 
  1146 ;;  instruction     1   19[COMRAM] unsigned char 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  _control        1   27[COMRAM] unsigned char 
  1149 ;;  data            2   25[COMRAM] short 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      void 
  1152 ;; Registers used:
  1153 ;;		wreg, status,2, status,0, cstack
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1159 ;;      Params:         1       0       0       0       0       0       0       0       0
  1160 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1161 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1162 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1163 ;;Total ram usage:        9 bytes
  1164 ;; Hardware stack levels used: 1
  1165 ;; Hardware stack levels required when called: 3
  1166 ;; This function calls:
  1167 ;;		_dataToSerial
  1168 ;; This function is called by:
  1169 ;;		_consoleWriteCommand
  1170 ;;		_LCD_clearDisplay
  1171 ;;		_LCDGraphicsInit
  1172 ;;		_clearGraphicsLCD
  1173 ;;		_setAddress
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text10
  1178  00039A                     __ptext10:
  1179                           	callstack 0
  1180  00039A                     _writeCommand:
  1181                           	callstack 25
  1182                           
  1183                           ;incstack = 0
  1184                           ;writeCommand@_control stored from wreg
  1185  00039A  6E1C               	movwf	writeCommand@_control^0,c
  1186  00039C                     
  1187                           ;lcd.c: 138:  int16_t data = ((((int16_t)(0xF0 & instruction)) << 8) | ((0x0F & instruct
      +                          ion) << 4));
  1188  00039C  5014               	movf	writeCommand@instruction^0,w,c
  1189  00039E  0B0F               	andlw	15
  1190  0003A0  6E15               	movwf	??_writeCommand^0,c
  1191  0003A2  6A16               	clrf	(??_writeCommand+1)^0,c
  1192  0003A4  3A15               	swapf	??_writeCommand^0,f,c
  1193  0003A6  3A16               	swapf	(??_writeCommand+1)^0,f,c
  1194  0003A8  0EF0               	movlw	240
  1195  0003AA  1616               	andwf	(??_writeCommand+1)^0,f,c
  1196  0003AC  5015               	movf	??_writeCommand^0,w,c
  1197  0003AE  0B0F               	andlw	15
  1198  0003B0  1216               	iorwf	(??_writeCommand+1)^0,f,c
  1199  0003B2  0EF0               	movlw	240
  1200  0003B4  1615               	andwf	??_writeCommand^0,f,c
  1201  0003B6  C014  F017         	movff	writeCommand@instruction,??_writeCommand+2
  1202  0003BA  0EF0               	movlw	240
  1203  0003BC  1617               	andwf	(??_writeCommand+2)^0,f,c
  1204  0003BE  5017               	movf	(??_writeCommand+2)^0,w,c
  1205  0003C0  6E19               	movwf	(??_writeCommand+4)^0,c
  1206  0003C2  6A18               	clrf	(??_writeCommand+3)^0,c
  1207  0003C4  5015               	movf	??_writeCommand^0,w,c
  1208  0003C6  1018               	iorwf	(??_writeCommand+3)^0,w,c
  1209  0003C8  6E1A               	movwf	writeCommand@data^0,c
  1210  0003CA  5016               	movf	(??_writeCommand+1)^0,w,c
  1211  0003CC  1019               	iorwf	(??_writeCommand+4)^0,w,c
  1212  0003CE  6E1B               	movwf	(writeCommand@data+1)^0,c
  1213  0003D0                     
  1214                           ;lcd.c: 139:  dataToSerial(((int16_t)(0xF8 | (_control << 1))), data);
  1215  0003D0  0EF8               	movlw	248
  1216  0003D2  C01C  F015         	movff	writeCommand@_control,??_writeCommand
  1217  0003D6  6A16               	clrf	(??_writeCommand+1)^0,c
  1218  0003D8  90D8               	bcf	status,0,c
  1219  0003DA  3615               	rlcf	??_writeCommand^0,f,c
  1220  0003DC  3616               	rlcf	(??_writeCommand+1)^0,f,c
  1221  0003DE  1015               	iorwf	??_writeCommand^0,w,c
  1222  0003E0  6E0A               	movwf	dataToSerial@numberH^0,c
  1223  0003E2  5016               	movf	(??_writeCommand+1)^0,w,c
  1224  0003E4  6E0B               	movwf	(dataToSerial@numberH+1)^0,c
  1225  0003E6  C01A  F00C         	movff	writeCommand@data,dataToSerial@numberL
  1226  0003EA  C01B  F00D         	movff	writeCommand@data+1,dataToSerial@numberL+1
  1227  0003EE  EC26  F001         	call	_dataToSerial	;wreg free
  1228  0003F2  0012               	return		;funcret
  1229  0003F4                     __end_of_writeCommand:
  1230                           	callstack 0
  1231                           
  1232 ;; *************** function _dataToSerial *****************
  1233 ;; Defined at:
  1234 ;;		line 210 in file "lcd.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  numberH         2    9[COMRAM] short 
  1237 ;;  numberL         2   11[COMRAM] short 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  temp            2   15[COMRAM] short 
  1240 ;;  temp            2   13[COMRAM] short 
  1241 ;;  counter         2   17[COMRAM] short 
  1242 ;; Return value:  Size  Location     Type
  1243 ;;                  1    wreg      unsigned char 
  1244 ;; Registers used:
  1245 ;;		wreg, status,2, status,0
  1246 ;; Tracked objects:
  1247 ;;		On entry : 0/0
  1248 ;;		On exit  : 0/0
  1249 ;;		Unchanged: 0/0
  1250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1251 ;;      Params:         4       0       0       0       0       0       0       0       0
  1252 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1254 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1255 ;;Total ram usage:       10 bytes
  1256 ;; Hardware stack levels used: 1
  1257 ;; Hardware stack levels required when called: 2
  1258 ;; This function calls:
  1259 ;;		Nothing
  1260 ;; This function is called by:
  1261 ;;		_writeCommand
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           	psect	text11
  1266  00024C                     __ptext11:
  1267                           	callstack 0
  1268  00024C                     _dataToSerial:
  1269                           	callstack 25
  1270  00024C                     
  1271                           ;lcd.c: 211:  int16_t counter = 0;
  1272  00024C  0E00               	movlw	0
  1273  00024E  6E13               	movwf	(dataToSerial@counter+1)^0,c
  1274  000250  0E00               	movlw	0
  1275  000252  6E12               	movwf	dataToSerial@counter^0,c
  1276                           
  1277                           ;lcd.c: 213:     while(counter < 8) {
  1278  000254  EF51  F001         	goto	l1128
  1279  000258                     l1114:
  1280                           
  1281                           ;lcd.c: 214:         int16_t temp = (numberH & (1 << 7));
  1282  000258  0E80               	movlw	128
  1283  00025A  140A               	andwf	dataToSerial@numberH^0,w,c
  1284  00025C  6E0E               	movwf	dataToSerial@temp^0,c
  1285  00025E  6A0F               	clrf	(dataToSerial@temp+1)^0,c
  1286                           
  1287                           ;lcd.c: 215:         if (temp == (1 << 7)) {
  1288  000260  0E80               	movlw	128
  1289  000262  180E               	xorwf	dataToSerial@temp^0,w,c
  1290  000264  100F               	iorwf	(dataToSerial@temp+1)^0,w,c
  1291  000266  A4D8               	btfss	status,2,c
  1292  000268  EF38  F001         	goto	u221
  1293  00026C  EF3A  F001         	goto	u220
  1294  000270                     u221:
  1295  000270  EF3D  F001         	goto	l1118
  1296  000274                     u220:
  1297  000274                     
  1298                           ;lcd.c: 216:             PORTB |= (1 << 0x4);
  1299  000274  8881               	bsf	129,4,c	;volatile
  1300                           
  1301                           ;lcd.c: 217:         }
  1302  000276  EF3E  F001         	goto	l1120
  1303  00027A                     l1118:
  1304                           
  1305                           ;lcd.c: 219:             PORTB &= ~(1 << 0x4);
  1306  00027A  9881               	bcf	129,4,c	;volatile
  1307  00027C                     l1120:
  1308                           
  1309                           ;lcd.c: 222:         PORTB = PORTB | (1 << 0x3);
  1310  00027C  5081               	movf	129,w,c	;volatile
  1311  00027E  0908               	iorlw	8
  1312  000280  6E81               	movwf	129,c	;volatile
  1313                           
  1314                           ;lcd.c: 223:   _delay((unsigned long)((5)*(48000000/4000000.0)));
  1315  000282  0E14               	movlw	20
  1316  000284                     u487:
  1317  000284  2EE8               	decfsz	wreg,f,c
  1318  000286  D7FE               	bra	u487
  1319  000288                     
  1320                           ;lcd.c: 224:         PORTB = PORTB & ~(1 << 0x3);
  1321  000288  5081               	movf	129,w,c	;volatile
  1322  00028A  0BF7               	andlw	247
  1323  00028C  6E81               	movwf	129,c	;volatile
  1324  00028E                     
  1325                           ;lcd.c: 225:   _delay((unsigned long)((5)*(48000000/4000000.0)));
  1326  00028E  0E14               	movlw	20
  1327  000290                     u497:
  1328  000290  2EE8               	decfsz	wreg,f,c
  1329  000292  D7FE               	bra	u497
  1330                           
  1331                           ;lcd.c: 226:   numberH = numberH << 1;
  1332  000294  90D8               	bcf	status,0,c
  1333  000296  340A               	rlcf	dataToSerial@numberH^0,w,c
  1334  000298  6E0A               	movwf	dataToSerial@numberH^0,c
  1335  00029A  340B               	rlcf	(dataToSerial@numberH+1)^0,w,c
  1336  00029C  6E0B               	movwf	(dataToSerial@numberH+1)^0,c
  1337  00029E                     
  1338                           ;lcd.c: 227:   counter++;
  1339  00029E  4A12               	infsnz	dataToSerial@counter^0,f,c
  1340  0002A0  2A13               	incf	(dataToSerial@counter+1)^0,f,c
  1341  0002A2                     l1128:
  1342                           
  1343                           ;lcd.c: 213:     while(counter < 8) {
  1344  0002A2  BE13               	btfsc	(dataToSerial@counter+1)^0,7,c
  1345  0002A4  EF5D  F001         	goto	u231
  1346  0002A8  5013               	movf	(dataToSerial@counter+1)^0,w,c
  1347  0002AA  E109               	bnz	u230
  1348  0002AC  0E08               	movlw	8
  1349  0002AE  5C12               	subwf	dataToSerial@counter^0,w,c
  1350  0002B0  A0D8               	btfss	status,0,c
  1351  0002B2  EF5D  F001         	goto	u231
  1352  0002B6  EF5F  F001         	goto	u230
  1353  0002BA                     u231:
  1354  0002BA  EF2C  F001         	goto	l1114
  1355  0002BE                     u230:
  1356  0002BE                     
  1357                           ;lcd.c: 230:     counter = 0;
  1358  0002BE  0E00               	movlw	0
  1359  0002C0  6E13               	movwf	(dataToSerial@counter+1)^0,c
  1360  0002C2  0E00               	movlw	0
  1361  0002C4  6E12               	movwf	dataToSerial@counter^0,c
  1362                           
  1363                           ;lcd.c: 251:  while(counter < 16) {
  1364  0002C6  EF8C  F001         	goto	l1146
  1365  0002CA                     l1132:
  1366                           
  1367                           ;lcd.c: 252:         int16_t temp = (numberL & (1 << 15));
  1368  0002CA  0E00               	movlw	0
  1369  0002CC  140C               	andwf	dataToSerial@numberL^0,w,c
  1370  0002CE  6E10               	movwf	dataToSerial@temp_352^0,c
  1371  0002D0  0E80               	movlw	128
  1372  0002D2  140D               	andwf	(dataToSerial@numberL+1)^0,w,c
  1373  0002D4  6E11               	movwf	(dataToSerial@temp_352+1)^0,c
  1374                           
  1375                           ;lcd.c: 253:         if (temp == (1 << 15)) {
  1376  0002D6  0E80               	movlw	128
  1377  0002D8  1811               	xorwf	(dataToSerial@temp_352+1)^0,w,c
  1378  0002DA  1010               	iorwf	dataToSerial@temp_352^0,w,c
  1379  0002DC  A4D8               	btfss	status,2,c
  1380  0002DE  EF73  F001         	goto	u241
  1381  0002E2  EF75  F001         	goto	u240
  1382  0002E6                     u241:
  1383  0002E6  EF78  F001         	goto	l1136
  1384  0002EA                     u240:
  1385  0002EA                     
  1386                           ;lcd.c: 254:             PORTB |= (1 << 0x4);
  1387  0002EA  8881               	bsf	129,4,c	;volatile
  1388                           
  1389                           ;lcd.c: 255:         }
  1390  0002EC  EF79  F001         	goto	l1138
  1391  0002F0                     l1136:
  1392                           
  1393                           ;lcd.c: 257:             PORTB &= ~(1 << 0x4);
  1394  0002F0  9881               	bcf	129,4,c	;volatile
  1395  0002F2                     l1138:
  1396                           
  1397                           ;lcd.c: 259:         PORTB = PORTB | (1 << 0x3);
  1398  0002F2  5081               	movf	129,w,c	;volatile
  1399  0002F4  0908               	iorlw	8
  1400  0002F6  6E81               	movwf	129,c	;volatile
  1401                           
  1402                           ;lcd.c: 260:   _delay((unsigned long)((5)*(48000000/4000000.0)));
  1403  0002F8  0E14               	movlw	20
  1404  0002FA                     u507:
  1405  0002FA  2EE8               	decfsz	wreg,f,c
  1406  0002FC  D7FE               	bra	u507
  1407  0002FE                     
  1408                           ;lcd.c: 261:         PORTB = PORTB & ~(1 << 0x3);
  1409  0002FE  5081               	movf	129,w,c	;volatile
  1410  000300  0BF7               	andlw	247
  1411  000302  6E81               	movwf	129,c	;volatile
  1412  000304                     
  1413                           ;lcd.c: 262:   _delay((unsigned long)((5)*(48000000/4000000.0)));
  1414  000304  0E14               	movlw	20
  1415  000306                     u517:
  1416  000306  2EE8               	decfsz	wreg,f,c
  1417  000308  D7FE               	bra	u517
  1418                           
  1419                           ;lcd.c: 263:   numberL = numberL << 1;
  1420  00030A  90D8               	bcf	status,0,c
  1421  00030C  340C               	rlcf	dataToSerial@numberL^0,w,c
  1422  00030E  6E0C               	movwf	dataToSerial@numberL^0,c
  1423  000310  340D               	rlcf	(dataToSerial@numberL+1)^0,w,c
  1424  000312  6E0D               	movwf	(dataToSerial@numberL+1)^0,c
  1425  000314                     
  1426                           ;lcd.c: 264:   counter++;
  1427  000314  4A12               	infsnz	dataToSerial@counter^0,f,c
  1428  000316  2A13               	incf	(dataToSerial@counter+1)^0,f,c
  1429  000318                     l1146:
  1430                           
  1431                           ;lcd.c: 251:  while(counter < 16) {
  1432  000318  BE13               	btfsc	(dataToSerial@counter+1)^0,7,c
  1433  00031A  EF98  F001         	goto	u251
  1434  00031E  5013               	movf	(dataToSerial@counter+1)^0,w,c
  1435  000320  E109               	bnz	u250
  1436  000322  0E10               	movlw	16
  1437  000324  5C12               	subwf	dataToSerial@counter^0,w,c
  1438  000326  A0D8               	btfss	status,0,c
  1439  000328  EF98  F001         	goto	u251
  1440  00032C  EF9A  F001         	goto	u250
  1441  000330                     u251:
  1442  000330  EF65  F001         	goto	l1132
  1443  000334                     u250:
  1444  000334  0012               	return		;funcret
  1445  000336                     __end_of_dataToSerial:
  1446                           	callstack 0
  1447                           
  1448 ;; *************** function _low_isr *****************
  1449 ;; Defined at:
  1450 ;;		line 98 in file "interrupts.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;		None
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;		None
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  1    wreg      void 
  1457 ;; Registers used:
  1458 ;;		None
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1464 ;;      Params:         0       0       0       0       0       0       0       0       0
  1465 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1466 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1467 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1468 ;;Total ram usage:        1 bytes
  1469 ;; Hardware stack levels used: 1
  1470 ;; Hardware stack levels required when called: 1
  1471 ;; This function calls:
  1472 ;;		Nothing
  1473 ;; This function is called by:
  1474 ;;		Interrupt level 1
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	intcodelo
  1479  000018                     __pintcodelo:
  1480                           	callstack 0
  1481  000018                     _low_isr:
  1482                           	callstack 24
  1483                           
  1484                           ;incstack = 0
  1485  000018  8043               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1486  00001A  CFE0 F009          	movff	bsr,??_low_isr
  1487  00001E  C009  FFE0         	movff	??_low_isr,bsr
  1488  000022  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1489  000024  0010               	retfie	
  1490  000026                     __end_of_low_isr:
  1491                           	callstack 0
  1492                           
  1493 ;; *************** function _high_isr *****************
  1494 ;; Defined at:
  1495 ;;		line 19 in file "interrupts.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  i               1    6[COMRAM] unsigned char 
  1500 ;;  data            1    7[COMRAM] unsigned char 
  1501 ;;  bit5            1    5[COMRAM] unsigned char 
  1502 ;;  bit4            1    4[COMRAM] unsigned char 
  1503 ;;  bit3            1    3[COMRAM] unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1513 ;;      Params:         0       0       0       0       0       0       0       0       0
  1514 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1515 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1516 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1517 ;;Total ram usage:        8 bytes
  1518 ;; Hardware stack levels used: 1
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		Interrupt level 2
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           	psect	intcode
  1527  000008                     __pintcode:
  1528                           	callstack 0
  1529  000008                     _high_isr:
  1530                           	callstack 24
  1531                           
  1532                           ;incstack = 0
  1533  000008  8243               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1534  00000A  EDA7  F000         	call	int_func,f	;refresh shadow registers
  1535                           
  1536                           	psect	intcode_body
  1537  00014E                     __pintcode_body:
  1538                           	callstack 24
  1539  00014E                     int_func:
  1540                           	callstack 24
  1541  00014E  0006               	pop		; remove dummy address from shadow register refresh
  1542  000150  CFD9 F002          	movff	fsr2l,??_high_isr+1
  1543  000154  CFDA F003          	movff	fsr2h,??_high_isr+2
  1544  000158                     
  1545                           ;interrupts.c: 21:     (INTCONbits.GIE = 0);
  1546  000158  9EF2               	bcf	242,7,c	;volatile
  1547                           
  1548                           ;interrupts.c: 22:     (INTCONbits.INT0F=0);
  1549  00015A  92F2               	bcf	242,1,c	;volatile
  1550  00015C                     
  1551                           ;interrupts.c: 23:     for(char i = 0; i < 2; i++) {__asm("nop"); };
  1552  00015C  0E00               	movlw	0
  1553  00015E  6E07               	movwf	high_isr@i^0,c
  1554  000160                     i2l98:
  1555  000160  F000               	nop		;# 
  1556  000162  2A07               	incf	high_isr@i^0,f,c
  1557  000164  0E01               	movlw	1
  1558  000166  6407               	cpfsgt	high_isr@i^0,c
  1559  000168  EFB8  F000         	goto	i2u32_41
  1560  00016C  EFBA  F000         	goto	i2u32_40
  1561  000170                     i2u32_41:
  1562  000170  EFB0  F000         	goto	i2l98
  1563  000174                     i2u32_40:
  1564  000174                     
  1565                           ;interrupts.c: 24:     char bit3 = (PORTB & (1 << 0x7));
  1566  000174  5081               	movf	129,w,c	;volatile
  1567  000176  0B80               	andlw	128
  1568  000178  6E04               	movwf	high_isr@bit3^0,c
  1569                           
  1570                           ;interrupts.c: 25:     char bit4 = (PORTA & (1 << 0x0));
  1571  00017A  5080               	movf	128,w,c	;volatile
  1572  00017C  0B01               	andlw	1
  1573  00017E  6E05               	movwf	high_isr@bit4^0,c
  1574                           
  1575                           ;interrupts.c: 26:  char bit5 = (PORTA & (1 << 0x1));
  1576  000180  5080               	movf	128,w,c	;volatile
  1577  000182  0B02               	andlw	2
  1578  000184  6E06               	movwf	high_isr@bit5^0,c
  1579  000186                     
  1580                           ;interrupts.c: 28:     char data = PORTC;
  1581  000186  CF82 F008          	movff	3970,high_isr@data	;volatile
  1582  00018A                     
  1583                           ;interrupts.c: 30:     if (bit3) {
  1584  00018A  5004               	movf	high_isr@bit3^0,w,c
  1585  00018C  B4D8               	btfsc	status,2,c
  1586  00018E  EFCB  F000         	goto	i2u33_41
  1587  000192  EFCD  F000         	goto	i2u33_40
  1588  000196                     i2u33_41:
  1589  000196  EFCE  F000         	goto	i2l1280
  1590  00019A                     i2u33_40:
  1591  00019A                     
  1592                           ;interrupts.c: 31:         data |= (1 << 0x3);
  1593  00019A  8608               	bsf	high_isr@data^0,3,c
  1594  00019C                     i2l1280:
  1595                           
  1596                           ;interrupts.c: 34:     if (bit4) {
  1597  00019C  5005               	movf	high_isr@bit4^0,w,c
  1598  00019E  B4D8               	btfsc	status,2,c
  1599  0001A0  EFD4  F000         	goto	i2u34_41
  1600  0001A4  EFD6  F000         	goto	i2u34_40
  1601  0001A8                     i2u34_41:
  1602  0001A8  EFD7  F000         	goto	i2l1284
  1603  0001AC                     i2u34_40:
  1604  0001AC                     
  1605                           ;interrupts.c: 35:         data |= (1 << 0x4);
  1606  0001AC  8808               	bsf	high_isr@data^0,4,c
  1607  0001AE                     i2l1284:
  1608                           
  1609                           ;interrupts.c: 38:     if (bit5) {
  1610  0001AE  5006               	movf	high_isr@bit5^0,w,c
  1611  0001B0  B4D8               	btfsc	status,2,c
  1612  0001B2  EFDD  F000         	goto	i2u35_41
  1613  0001B6  EFDF  F000         	goto	i2u35_40
  1614  0001BA                     i2u35_41:
  1615  0001BA  EFE0  F000         	goto	i2l1288
  1616  0001BE                     i2u35_40:
  1617  0001BE                     
  1618                           ;interrupts.c: 39:         data |= (1 << 0x5);
  1619  0001BE  8A08               	bsf	high_isr@data^0,5,c
  1620  0001C0                     i2l1288:
  1621                           
  1622                           ;interrupts.c: 42:     if (starting_sequence > 3)
  1623  0001C0  BE3B               	btfsc	(_starting_sequence+1)^0,7,c
  1624  0001C2  EFEC  F000         	goto	i2u36_41
  1625  0001C6  503B               	movf	(_starting_sequence+1)^0,w,c
  1626  0001C8  E109               	bnz	i2u36_40
  1627  0001CA  0E04               	movlw	4
  1628  0001CC  5C3A               	subwf	_starting_sequence^0,w,c
  1629  0001CE  A0D8               	btfss	status,0,c
  1630  0001D0  EFEC  F000         	goto	i2u36_41
  1631  0001D4  EFEE  F000         	goto	i2u36_40
  1632  0001D8                     i2u36_41:
  1633  0001D8  EF08  F001         	goto	i2l1298
  1634  0001DC                     i2u36_40:
  1635  0001DC                     
  1636                           ;interrupts.c: 43:  {;interrupts.c: 44:   _buffer[pointer] = data;
  1637  0001DC  0E60               	movlw	low __buffer
  1638  0001DE  243C               	addwf	_pointer^0,w,c
  1639  0001E0  6ED9               	movwf	fsr2l,c
  1640  0001E2  0E00               	movlw	high __buffer
  1641  0001E4  203D               	addwfc	(_pointer+1)^0,w,c
  1642  0001E6  6EDA               	movwf	fsr2h,c
  1643  0001E8  C008  FFDF         	movff	high_isr@data,indf2
  1644  0001EC                     
  1645                           ;interrupts.c: 45:   pointer++;
  1646  0001EC  4A3C               	infsnz	_pointer^0,f,c
  1647  0001EE  2A3D               	incf	(_pointer+1)^0,f,c
  1648  0001F0                     
  1649                           ;interrupts.c: 46:         if (pointer == 3)
  1650  0001F0  0E03               	movlw	3
  1651  0001F2  183C               	xorwf	_pointer^0,w,c
  1652  0001F4  103D               	iorwf	(_pointer+1)^0,w,c
  1653  0001F6  A4D8               	btfss	status,2,c
  1654  0001F8  EF00  F001         	goto	i2u37_41
  1655  0001FC  EF02  F001         	goto	i2u37_40
  1656  000200                     i2u37_41:
  1657  000200  EF1F  F001         	goto	i2l1304
  1658  000204                     i2u37_40:
  1659  000204                     
  1660                           ;interrupts.c: 47:         {;interrupts.c: 48:             execute_proc = 1;
  1661  000204  0E00               	movlw	0
  1662  000206  6E37               	movwf	(_execute_proc+1)^0,c
  1663  000208  0E01               	movlw	1
  1664  00020A  6E36               	movwf	_execute_proc^0,c
  1665  00020C  EF1F  F001         	goto	i2l1304
  1666  000210                     i2l1298:
  1667  000210  0E3F               	movlw	low _start_tokens
  1668  000212  243A               	addwf	_starting_sequence^0,w,c
  1669  000214  6ED9               	movwf	fsr2l,c
  1670  000216  0E00               	movlw	high _start_tokens
  1671  000218  203B               	addwfc	(_starting_sequence+1)^0,w,c
  1672  00021A  6EDA               	movwf	fsr2h,c
  1673  00021C  5008               	movf	high_isr@data^0,w,c
  1674  00021E  18DE               	xorwf	postinc2,w,c
  1675  000220  A4D8               	btfss	status,2,c
  1676  000222  EF15  F001         	goto	i2u38_41
  1677  000226  EF17  F001         	goto	i2u38_40
  1678  00022A                     i2u38_41:
  1679  00022A  EF1B  F001         	goto	i2l1302
  1680  00022E                     i2u38_40:
  1681  00022E                     
  1682                           ;interrupts.c: 52:  {;interrupts.c: 53:   starting_sequence++;
  1683  00022E  4A3A               	infsnz	_starting_sequence^0,f,c
  1684  000230  2A3B               	incf	(_starting_sequence+1)^0,f,c
  1685                           
  1686                           ;interrupts.c: 54:  }
  1687  000232  EF1F  F001         	goto	i2l1304
  1688  000236                     i2l1302:
  1689                           
  1690                           ;interrupts.c: 56:  {;interrupts.c: 57:   starting_sequence = 0;
  1691  000236  0E00               	movlw	0
  1692  000238  6E3B               	movwf	(_starting_sequence+1)^0,c
  1693  00023A  0E00               	movlw	0
  1694  00023C  6E3A               	movwf	_starting_sequence^0,c
  1695  00023E                     i2l1304:
  1696                           
  1697                           ;interrupts.c: 95:     (INTCONbits.GIE = 1);
  1698  00023E  8EF2               	bsf	242,7,c	;volatile
  1699  000240  C003  FFDA         	movff	??_high_isr+2,fsr2h
  1700  000244  C002  FFD9         	movff	??_high_isr+1,fsr2l
  1701  000248  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1702  00024A  0011               	retfie		f
  1703  00024C                     __end_of_high_isr:
  1704                           	callstack 0
  1705  0000                     
  1706                           	psect	rparam
  1707  0000                     
  1708                           	psect	temp
  1709  000043                     btemp:
  1710                           	callstack 0
  1711  000043                     	ds	1
  1712  0000                     int$flags	set	btemp
  1713  0000                     wtemp8	set	btemp+1
  1714  0000                     ttemp5	set	btemp+1
  1715  0000                     ttemp6	set	btemp+4
  1716  0000                     ttemp7	set	btemp+8
  1717                           
  1718                           	psect	idloc
  1719                           
  1720                           ;Config register IDLOC0 @ 0x200000
  1721                           ;	unspecified, using default values
  1722  200000                     	org	2097152
  1723  200000  FF                 	db	255
  1724                           
  1725                           ;Config register IDLOC1 @ 0x200001
  1726                           ;	unspecified, using default values
  1727  200001                     	org	2097153
  1728  200001  FF                 	db	255
  1729                           
  1730                           ;Config register IDLOC2 @ 0x200002
  1731                           ;	unspecified, using default values
  1732  200002                     	org	2097154
  1733  200002  FF                 	db	255
  1734                           
  1735                           ;Config register IDLOC3 @ 0x200003
  1736                           ;	unspecified, using default values
  1737  200003                     	org	2097155
  1738  200003  FF                 	db	255
  1739                           
  1740                           ;Config register IDLOC4 @ 0x200004
  1741                           ;	unspecified, using default values
  1742  200004                     	org	2097156
  1743  200004  FF                 	db	255
  1744                           
  1745                           ;Config register IDLOC5 @ 0x200005
  1746                           ;	unspecified, using default values
  1747  200005                     	org	2097157
  1748  200005  FF                 	db	255
  1749                           
  1750                           ;Config register IDLOC6 @ 0x200006
  1751                           ;	unspecified, using default values
  1752  200006                     	org	2097158
  1753  200006  FF                 	db	255
  1754                           
  1755                           ;Config register IDLOC7 @ 0x200007
  1756                           ;	unspecified, using default values
  1757  200007                     	org	2097159
  1758  200007  FF                 	db	255
  1759                           
  1760                           	psect	config
  1761                           
  1762                           ;Config register CONFIG1L @ 0x300000
  1763                           ;	PLL Prescaler Selection bits
  1764                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1765                           ;	System Clock Postscaler Selection bits
  1766                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1767                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1768                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1769  300000                     	org	3145728
  1770  300000  20                 	db	32
  1771                           
  1772                           ;Config register CONFIG1H @ 0x300001
  1773                           ;	Oscillator Selection bits
  1774                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  1775                           ;	Fail-Safe Clock Monitor Enable bit
  1776                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1777                           ;	Internal/External Oscillator Switchover bit
  1778                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1779  300001                     	org	3145729
  1780  300001  0E                 	db	14
  1781                           
  1782                           ;Config register CONFIG2L @ 0x300002
  1783                           ;	Power-up Timer Enable bit
  1784                           ;	PWRT = OFF, PWRT disabled
  1785                           ;	Brown-out Reset Enable bits
  1786                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1787                           ;	Brown-out Reset Voltage bits
  1788                           ;	BORV = 3, Minimum setting 2.05V
  1789                           ;	USB Voltage Regulator Enable bit
  1790                           ;	VREGEN = OFF, USB voltage regulator disabled
  1791  300002                     	org	3145730
  1792  300002  1F                 	db	31
  1793                           
  1794                           ;Config register CONFIG2H @ 0x300003
  1795                           ;	Watchdog Timer Enable bit
  1796                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1797                           ;	Watchdog Timer Postscale Select bits
  1798                           ;	WDTPS = 32768, 1:32768
  1799  300003                     	org	3145731
  1800  300003  1E                 	db	30
  1801                           
  1802                           ; Padding undefined space
  1803  300004                     	org	3145732
  1804  300004  FF                 	db	255
  1805                           
  1806                           ;Config register CONFIG3H @ 0x300005
  1807                           ;	CCP2 MUX bit
  1808                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
  1809                           ;	PORTB A/D Enable bit
  1810                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1811                           ;	Low-Power Timer 1 Oscillator Enable bit
  1812                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1813                           ;	MCLR Pin Enable bit
  1814                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1815  300005                     	org	3145733
  1816  300005  80                 	db	128
  1817                           
  1818                           ;Config register CONFIG4L @ 0x300006
  1819                           ;	Stack Full/Underflow Reset Enable bit
  1820                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1821                           ;	Single-Supply ICSP Enable bit
  1822                           ;	LVP = OFF, Single-Supply ICSP disabled
  1823                           ;	Extended Instruction Set Enable bit
  1824                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1825                           ;	Background Debugger Enable bit
  1826                           ;	DEBUG = 0x1, unprogrammed default
  1827  300006                     	org	3145734
  1828  300006  81                 	db	129
  1829                           
  1830                           ; Padding undefined space
  1831  300007                     	org	3145735
  1832  300007  FF                 	db	255
  1833                           
  1834                           ;Config register CONFIG5L @ 0x300008
  1835                           ;	Code Protection bit
  1836                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1837                           ;	Code Protection bit
  1838                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1839                           ;	Code Protection bit
  1840                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1841                           ;	Code Protection bit
  1842                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1843  300008                     	org	3145736
  1844  300008  0F                 	db	15
  1845                           
  1846                           ;Config register CONFIG5H @ 0x300009
  1847                           ;	Boot Block Code Protection bit
  1848                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1849                           ;	Data EEPROM Code Protection bit
  1850                           ;	CPD = OFF, Data EEPROM is not code-protected
  1851  300009                     	org	3145737
  1852  300009  C0                 	db	192
  1853                           
  1854                           ;Config register CONFIG6L @ 0x30000A
  1855                           ;	Write Protection bit
  1856                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1857                           ;	Write Protection bit
  1858                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1859                           ;	Write Protection bit
  1860                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1861                           ;	Write Protection bit
  1862                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1863  30000A                     	org	3145738
  1864  30000A  0F                 	db	15
  1865                           
  1866                           ;Config register CONFIG6H @ 0x30000B
  1867                           ;	Configuration Register Write Protection bit
  1868                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1869                           ;	Boot Block Write Protection bit
  1870                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1871                           ;	Data EEPROM Write Protection bit
  1872                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1873  30000B                     	org	3145739
  1874  30000B  E0                 	db	224
  1875                           
  1876                           ;Config register CONFIG7L @ 0x30000C
  1877                           ;	Table Read Protection bit
  1878                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1879                           ;	Table Read Protection bit
  1880                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1881                           ;	Table Read Protection bit
  1882                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1883                           ;	Table Read Protection bit
  1884                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1885  30000C                     	org	3145740
  1886  30000C  0F                 	db	15
  1887                           
  1888                           ;Config register CONFIG7H @ 0x30000D
  1889                           ;	Boot Block Table Read Protection bit
  1890                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1891  30000D                     	org	3145741
  1892  30000D  40                 	db	64
  1893                           tosu	equ	0xFFF
  1894                           tosh	equ	0xFFE
  1895                           tosl	equ	0xFFD
  1896                           stkptr	equ	0xFFC
  1897                           pclatu	equ	0xFFB
  1898                           pclath	equ	0xFFA
  1899                           pcl	equ	0xFF9
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           prodh	equ	0xFF4
  1905                           prodl	equ	0xFF3
  1906                           indf0	equ	0xFEF
  1907                           postinc0	equ	0xFEE
  1908                           postdec0	equ	0xFED
  1909                           preinc0	equ	0xFEC
  1910                           plusw0	equ	0xFEB
  1911                           fsr0h	equ	0xFEA
  1912                           fsr0l	equ	0xFE9
  1913                           wreg	equ	0xFE8
  1914                           indf1	equ	0xFE7
  1915                           postinc1	equ	0xFE6
  1916                           postdec1	equ	0xFE5
  1917                           preinc1	equ	0xFE4
  1918                           plusw1	equ	0xFE3
  1919                           fsr1h	equ	0xFE2
  1920                           fsr1l	equ	0xFE1
  1921                           bsr	equ	0xFE0
  1922                           indf2	equ	0xFDF
  1923                           postinc2	equ	0xFDE
  1924                           postdec2	equ	0xFDD
  1925                           preinc2	equ	0xFDC
  1926                           plusw2	equ	0xFDB
  1927                           fsr2h	equ	0xFDA
  1928                           fsr2l	equ	0xFD9
  1929                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         94
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      66
    BANK0           160      0      69
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_loop
    _loop->_consoleWriteCommand
    _config->_LCDConsoleInit
    _LCDConsoleInit->_consoleWriteCommand
    _consoleWriteCommand->_writeCommand
    _LCD_clearDisplay->_writeCommand
    _writeCommand->_dataToSerial

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5974
                             _config
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                 6     6      0    2058
                                             31 COMRAM     6     6      0
                _consoleWriteCommand
                          _reset_lcd
                 _reset_lcd_sequence
 ---------------------------------------------------------------------------------
 (2) _reset_lcd_sequence                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0    3916
                     _LCDConsoleInit
 ---------------------------------------------------------------------------------
 (2) _LCDConsoleInit                                       3     1      2    3916
                                             31 COMRAM     3     1      2
                   _LCD_clearDisplay
                        _chip_select
                _consoleWriteCommand
                          _initPorts
                          _reset_lcd
 ---------------------------------------------------------------------------------
 (2) _reset_lcd                                            1     1      0       0
                                              9 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _initPorts                                            2     0      2     250
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _consoleWriteCommand                                  3     2      1    1989
                                             28 COMRAM     3     2      1
                       _writeCommand
 ---------------------------------------------------------------------------------
 (3) _chip_select                                          2     0      2     174
                                              9 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _LCD_clearDisplay                                     1     1      0    1337
                                             28 COMRAM     1     1      0
                       _writeCommand
 ---------------------------------------------------------------------------------
 (3) _writeCommand                                         9     8      1    1337
                                             19 COMRAM     9     8      1
                       _dataToSerial
 ---------------------------------------------------------------------------------
 (4) _dataToSerial                                        10     6      4     336
                                              9 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _low_isr                                              1     1      0       0
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                             8     8      0     163
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config
     _LCDConsoleInit
       _LCD_clearDisplay
         _writeCommand
           _dataToSerial
       _chip_select
       _consoleWriteCommand
         _writeCommand
       _initPorts
       _reset_lcd
   _loop
     _consoleWriteCommand
     _reset_lcd
     _reset_lcd_sequence

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0      45       6       43.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      42       1       70.2%
BITBIGSFRhl         2F      0       0      22        0.0%
BITBIGSFRlhhh       2C      0       0      23        0.0%
BITBIGSFRlhll       12      0       0      25        0.0%
BITBIGSFRlhhl        F      0       0      24        0.0%
BITBIGSFRhh          D      0       0      21        0.0%
BITBIGSFRll          D      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      87       3        0.0%
DATA                 0      0      87       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Jul 27 12:48:29 2022

                            l41 051C            __end_of_dataToSerial 0336                              l44 0468  
                            l47 0040                              l48 014C                              bsr 000FE0  
                           l141 0398                             l144 04D4                             l136 0490  
                           l147 050A                             l139 0352                             l184 0334  
                           l168 03F2                             l192 04F0                             l187 04B6  
                           u220 0274                             u300 006E                             u221 0270  
                           u301 006A                             u230 02BE                             u310 00B6  
                           u231 02BA                             u311 00B2                             u240 02EA  
                           u241 02E6                             u250 0334                             u251 0330  
                           u260 0488                             u261 0484                             u270 04E8  
                           u271 04E4                             u280 0366                             u281 0362  
                           u290 003C                             u507 02FA                             u291 0038  
                           u517 0306                             u437 045E                             u447 049A  
                           u457 04AC                             u467 04CA                             u477 0502  
                           u487 0284                             u497 0290                             wreg 000FE8  
                          l1120 027C                            l1112 024C                            l1200 0444  
                          l1130 02BE                            l1122 0288                            l1114 0258  
                          l1210 044E                            l1202 0446                            l1140 02FE  
                          l1132 02CA                            l1124 028E                            l1116 0274  
                          l1212 0450                            l1204 0448                            l1220 002A  
                          l1142 0304                            l1134 02EA                            l1126 029E  
                          l1118 027A                            l1150 03D0                            l1214 045C  
                          l1206 044A                            l1230 007E                            l1144 0314  
                          l1136 02F0                            l1128 02A2                            l1152 04BA  
                          l1160 04A4                            l1216 0464                            l1208 044C  
                          l1240 00D6                            l1232 0094                            l1224 004A  
                          l1138 02F2                            l1146 0318                            l1170 04D6  
                          l1154 04C4                            l1162 046A                            l1218 0466  
                          l1242 00E4                            l1234 0098                            l1250 0102  
                          l1148 039C                            l1172 04E8                            l1164 047A  
                          l1156 0492                            l1180 050C                            l1244 00F2  
                          l1236 00BA                            l1228 0072                            l1174 04EE  
                          l1166 0488                            l1158 0494                            l1190 0354  
                          l1182 0336                            l1246 00FA                            l1238 00C8  
                          l1176 04F2                            l1168 048E                            l1192 0356  
                          l1184 034E                            l1352 0116                            l1256 051E  
                          l1178 04FC                            l1194 0366                            l1258 0522  
                          l1196 043A                            l1198 043E                            i2l98 0160  
              dataToSerial@temp 000E                            _main 051E                            _loop 002A  
    consoleWriteCommand@control 001F                            fsr2h 000FDA                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            btemp 0043  
                  _start_tokens 003F        LCDConsoleInit@serialMode 0020                            start 0026  
                  ___param_bank 000000                    high_isr@bit3 0004                    high_isr@bit4 0005  
                  high_isr@bit5 0006                    high_isr@data 0008                           ?_main 0001  
                         ?_loop 0001                           i1l113 001E                           i2l108 0240  
                         _PORTA 000F80                           _PORTB 000F81                           _PORTC 000F82  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _bytes 0038                 __end_of_low_isr 0026                           tablat 000FF5  
                         loop@i 0024                           ttemp5 0044                           ttemp6 0047  
                         ttemp7 004B                           status 000FD8                           wtemp8 0044  
               __initialization 03F4                    __end_of_main 052E                    __end_of_loop 014E  
                        ??_main 0026                          ??_loop 0020                   __activetblptr 000002  
                  _writeCommand 039A                          i2l1300 022E                          i2l1302 0236  
                        i2l1304 023E                          i2l1260 0158                          i2l1270 0164  
                        i2l1262 015C                          i2l1280 019C                          i2l1272 0174  
                        i2l1290 01DC                          i2l1282 01AC                          i2l1274 0186  
                        i2l1292 01EC                          i2l1284 01AE                          i2l1276 018A  
                        i2l1268 0162                          i2l1294 01F0                          i2l1286 01BE  
                        i2l1278 019A                          i2l1296 0204                          i2l1288 01C0  
                        i2l1298 0210                __end_of_high_isr 024C                          _config 043A  
                        clear_0 041A                          clear_1 0426                          isa$std 000001  
                  __pdataCOMRAM 003F                       ??_low_isr 0009                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                ??_LCDConsoleInit 0022  
                  _dataToSerial 024C                      __accesstop 0060         __end_of__initialization 042C  
             ?_LCD_clearDisplay 0001                   ___rparam_used 000001              ??_LCD_clearDisplay 001D  
                __pcstackCOMRAM 0001                      __pbssBANK0 0060  consoleWriteCommand@instruction 001D  
                       ?_config 0001                         i2u32_40 0174                         i2u32_41 0170  
                       i2u33_40 019A                         i2u33_41 0196                         i2u34_40 01AC  
                       i2u34_41 01A8                         i2u35_40 01BE                         i2u35_41 01BA  
                       i2u36_40 01DC                         i2u36_41 01D8                         i2u37_40 0204  
                       i2u37_41 0200                         i2u38_40 022E                         i2u38_41 022A  
                     ?_high_isr 0001             dataToSerial@counter 0012             dataToSerial@numberH 000A  
           dataToSerial@numberL 000C                         __Hparam 0000                         __Lparam 0000  
           initPorts@serialMode 000A                         __buffer 0060                         __pcinit 03F4  
                       __ramtop 0800                         __ptext0 051E                         __ptext1 002A  
                       __ptext2 050C                         __ptext3 043A                         __ptext4 0336  
                       __ptext5 0492                         __ptext6 046A                         __ptext7 04B8  
                       __ptext8 04D6                         __ptext9 04F2                         _command 003E  
             __end_of_initPorts 0492                         _low_isr 0018                         _pointer 003C  
                    ??_high_isr 0001                  __pintcode_body 014E            end_of_initialization 042C  
                 __Lmediumconst 0000               __end_of_reset_lcd 04B8                         int_func 014E  
                 ??_chip_select 000C                         postdec1 000FE5                         postinc0 000FEE  
                       postinc2 000FDE                loop@dataReceived 0022             _consoleWriteCommand 04B8  
                 __pidataCOMRAM 052E                  __end_of_config 046A             __end_of_chip_select 04F2  
               LCDConsoleInit@i 0022            ?_consoleWriteCommand 001D             start_initialization 03F4  
              writeCommand@data 001A                        ??_config 0023           ??_consoleWriteCommand 001E  
                   __pbssCOMRAM 0026                    _execute_proc 0036      __end_of_reset_lcd_sequence 051E  
                     _lcdBuffer 0026                     _chip_select 04D6                       __pintcode 0008  
                   __pintcodelo 0018                        ?_low_isr 0001                   ?_writeCommand 0014  
                     _initPorts 046A            writeCommand@_control 001C                       _reset_lcd 0492  
                      _UCONbits 000F6D                _LCD_clearDisplay 04F2                      _ADCON1bits 000FC1  
                     high_isr@i 0007                  ??_writeCommand 0015                      ?_initPorts 000A  
                   _INTCON2bits 000FF1                       copy_data0 0408            dataToSerial@temp_352 0010  
                 ?_dataToSerial 000A                        __Hrparam 0000                      ?_reset_lcd 0001  
                      __Lrparam 0000                        __ptext10 039A                        __ptext11 024C  
                ??_dataToSerial 000E                        _high_isr 0008                  _LCDConsoleInit 0336  
                      isa$xinst 000000                        int$flags 0043                      _INTCONbits 000FF2  
                   ??_initPorts 000C                        intlevel1 0000                        intlevel2 0000  
        __end_of_LCDConsoleInit 039A                     ??_reset_lcd 000A            __end_of_writeCommand 03F4  
                  ?_chip_select 000A     __end_of_consoleWriteCommand 04D6              _reset_lcd_sequence 050C  
           ?_reset_lcd_sequence 0001        __end_of_LCD_clearDisplay 050C               _starting_sequence 003A  
          ??_reset_lcd_sequence 000A                 ?_LCDConsoleInit 0020                chip_select@value 000A  
       writeCommand@instruction 0014  
